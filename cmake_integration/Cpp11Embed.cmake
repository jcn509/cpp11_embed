include("${CMAKE_CURRENT_LIST_DIR}/Cpp11EmbedGeneric.cmake")

# Loosely based on this guide
# https://techtinkering.com/2013/02/12/using-dynamically-generated-header-files-with-cmake/
# Provides a target Cpp11EmbedGeneratedHeaders that you can link against
# that ensures that the headers will get built and be available in your
# targets include path

# Linking against this target will ensure that the headers are built
# and can be used.
add_library(Cpp11EmbedGeneratedHeaders INTERFACE)
set(AUTO_GENERATED_HEADERS_DIR "${CMAKE_CURRENT_BINARY_DIR}/AutoGenerated")
# Allow us to include the auto-generated headers
target_include_directories(Cpp11EmbedGeneratedHeaders INTERFACE "${AUTO_GENERATED_HEADERS_DIR}")

# OUTPUT_FILE_NAME is the name that you will include in your code
# e.g. #INCLUDE "test.h" or #include "headertype1/header.h"
# See the self tests CmakeLists.txt to understand how to use
# this function and to learn about its optional arguments
function(cpp11_embed_generate_header
    INPUT_FILE_PATH
    IDENTIFIER_NAME
    OUTPUT_FILE_NAME
)
    set(OUTPUT_FILE_PATH "${AUTO_GENERATED_HEADERS_DIR}/${OUTPUT_FILE_NAME}")

    # Replace output filename with path that includes the auto-generated
    # headers directory
    list(INSERT ARGV 2 "${OUTPUT_FILE_PATH}")
    list(REMOVE_AT ARGV 3)
    # Forward all arguments
    cpp11_embed_generate_header_no_target(${ARGV})

    # Ensure that the Cpp11EmbedGeneratedHeaders target is aware of all the headers
    # so that they will definitely be generated for us
    target_sources(Cpp11EmbedGeneratedHeaders PRIVATE "${OUTPUT_FILE_PATH}")
endfunction()